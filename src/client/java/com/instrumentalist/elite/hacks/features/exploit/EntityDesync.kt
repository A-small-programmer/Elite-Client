package com.instrumentalist.elite.hacks.features.exploit

import com.instrumentalist.elite.events.features.SendPacketEvent
import com.instrumentalist.elite.events.features.UpdateEvent
import com.instrumentalist.elite.events.features.WorldEvent
import com.instrumentalist.elite.hacks.Module
import com.instrumentalist.elite.hacks.ModuleCategory
import com.instrumentalist.elite.utils.ChatUtil
import com.instrumentalist.elite.utils.IMinecraft
import com.instrumentalist.elite.utils.move.MovementUtil
import com.instrumentalist.elite.utils.packet.PacketUtil
import net.minecraft.entity.Entity
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket
import net.minecraft.network.packet.c2s.play.VehicleMoveC2SPacket
import net.minecraft.util.math.Vec3d
import org.lwjgl.glfw.GLFW

class EntityDesync : Module(
    "Entity Desync",
    ModuleCategory.Exploit,
    GLFW.GLFW_KEY_UNKNOWN,
    false,
    true
) {
    private var ridingEntity: Entity? = null
    private var desynced = false

    override fun onDisable() {
        if (IMinecraft.mc.player == null) return
        if (desynced) {
            PacketUtil.sendPacket(
                ClientCommandC2SPacket(
                    ridingEntity,
                    ClientCommandC2SPacket.Mode.PRESS_SHIFT_KEY
                )
            )
            ChatUtil.printChat("Dismounted desynced entity")
        }
        ridingEntity = null
        desynced = false
    }

    override fun onEnable() {
        if (IMinecraft.mc.player == null) return

        if (IMinecraft.mc.player!!.vehicle != null) {
            ridingEntity = IMinecraft.mc.player!!.vehicle
        } else {
            ChatUtil.printChat("You must be riding to entity")
            this@EntityDesync.toggle()
        }
    }

    override fun onWorld(event: WorldEvent) {
        this@EntityDesync.toggle()
    }

    override fun onSendPacket(event: SendPacketEvent) {
        if (IMinecraft.mc.player == null) return

        val packet = event.packet

        if (packet is ClientCommandC2SPacket && (packet.mode == ClientCommandC2SPacket.Mode.PRESS_SHIFT_KEY || packet.mode == ClientCommandC2SPacket.Mode.RELEASE_SHIFT_KEY))
            event.cancel()
    }

    override fun onUpdate(event: UpdateEvent) {
        if (!desynced) {
            if (ridingEntity != null) {
                try {
                    IMinecraft.mc.player?.dismountVehicle()
                    IMinecraft.mc.world?.removeEntity(ridingEntity?.id!!, Entity.RemovalReason.UNLOADED_TO_CHUNK)
                    ChatUtil.printChat("Desynced riding entity")
                } catch (_: Exception) {
                }
                desynced = true
            }
        } else if (MovementUtil.hasMotion()) {
            ridingEntity?.setPosition(IMinecraft.mc.player!!.pos)
            PacketUtil.sendPacket(VehicleMoveC2SPacket(Vec3d(ridingEntity!!.x, ridingEntity!!.y, ridingEntity!!.z), IMinecraft.mc.player!!.yaw, IMinecraft.mc.player!!.pitch, true))
        }
    }
}